src/Language/PureScript/CoreFn/CSE.hs
@@ -227,11 +227,12 @@
    at d . non mempty . at e %%<~ \case
      Nothing -> freshIdent (nameHint e) <&> \ident -> ((True, ident), Just ident)
      Just ident -> pure ((False, ident), Just ident)
+   where
      -- A reminder: as with %%=, the first element of the returned pair is the
      -- final result of the expression, and the second element is the value to
      -- stuff back through the lens into the state. (The difference is that %%<~
      -- enables doing monadic work in the RHS, namely `freshIdent` here.)
-   where
+
      nameHint = \case
        App _ v1 v2
          | Var _ n <- v1,

  Formatting is not idempotent.
  Please, consider reporting the bug.
src/Language/PureScript/CoreFn/Laziness.hs
@@ -525,12 +525,12 @@
                          makeForceCall ann ident'
                    q -> Var ann q
             in (ident, rewriteExpr <$> item)
-           -- All that's left to do is run the above replacement on every item,
-           -- translate items from our `RecursiveGroupItem` representation back into the
-           -- form CoreFn expects, and inform the caller whether we made any laziness
-           -- transformations after all. (That last bit of information is used to
-           -- determine if the runtime factory function needs to be injected.)
-    in (uncurry fromRGI . replaceReferencesWithForceCall <$> items, Any . not $ IM.null replacements)
+    in -- All that's left to do is run the above replacement on every item,
+       -- translate items from our `RecursiveGroupItem` representation back into the
+       -- form CoreFn expects, and inform the caller whether we made any laziness
+       -- transformations after all. (That last bit of information is used to
+       -- determine if the runtime factory function needs to be injected.)
+       (uncurry fromRGI . replaceReferencesWithForceCall <$> items, Any . not $ IM.null replacements)
    where
      nullAnn = ssAnn nullSourceSpan
      runtimeLazy = Var nullAnn . Qualified ByNullSourcePos $ InternalIdent RuntimeLazyFactory

  Formatting is not idempotent.
  Please, consider reporting the bug.
